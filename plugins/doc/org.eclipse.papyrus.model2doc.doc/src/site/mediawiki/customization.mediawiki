=Contribution of new customized document generation=
 
==Introduction==
For the contribution of new (or customized) document generation, five elements are important: 
*'''Editor''': defines what kind of generated document and how it is generated.
*'''Context''': defines how and when this new document generation should be available to user.
*'''Transcription''': defines how the content (input) will be written on generated document (output).
*'''Transcriber''': defines how to read the data source (e.g. UML model) and what information will be transcript. The transcriber send inputs to the Transcription.
*'''Template''': defines the style of generated document.

The developer does not need to contribute with new implementation of all fives elements. For each needs, the developer must be forced to implement one or more new elements. 
In this documentation, we will explain a common case of contribution: The developer wants to contribute with a customization of the ODT document generator of UML model.  For more precision, in this use case, the developer needs are:
*Define a new way to read a UML model and extract information to be transcript;
*Define a new document style (e.g. add project logo on the first page);
*Define how and when this new document generation should be available to user.

From of these needs, the developer must implement a new '''Transcriber''', a new '''Template''' and a new '''Context'''. He will use the '''ODTEditor''' and '''ODTTranscription''' available in ''org.eclipse.papyrus.model2doc.odt'' plug-in.

==Step 1. Define a new Transcriber==
For defining a new Transcriber implementation, we must implement '''Transcriber''' interface available in ''org.eclipse.papyrus.model2doc.core'' plug-in. This interface has only one abstract method transcribe. See below an example of a Transcriber implementation:

<source lang="java">
public class MyUMLTranscriber implements Transcriber {

	private Package root = null;

	private Transcription transcription = null;

	private List<Class> classes = new ArrayList<Class>();
	
	/**
	 *
	 * Constructor.
	 *
	 * @param rootPackage
	 *            the root package
	 * @param transcription
	 *            the object in charge to do the transcription
	 */
	public MyUMLTranscriber(Package rootPackage, Transcription transcription) {
		root = rootPackage;
		this.transcription = transcription;
		
	}

	/**
	 * Read UML model and transcribe it.
	 */
	@Override
	public void transcribe() {
		// transcribe label of root package how document main title
		transcription.writeDocumentMainTitle(root.getName());

		// transcribe classes directly owned by root package
		transcribeClasses(root);

		// transcribe nested packages owned by root package
		for (Package nestedPackage : root.getNestedPackages()) {
			transcribeNestedPackages(nestedPackage, 1);

		}

		// save transcription
		transcription.save(root.getName());
	}
	/**
	 * Get nested packages and transcribe them.
	 * 
	 * @param owner
	 *            owner package
	 * @param level
	 *            nested package level
	 */
	private void transcribeNestedPackages(Package owner, int level) {
		// transcribe label of owner package how section title
		transcription.writeSectionTitle(owner.getName(), level);

		// transcribe classes directly owned by owner package
		transcribeClasses(owner);

		for (Package nestedPackage : owner.getNestedPackages()) {
			// transcribe nested packages owned by owner package
			transcribeNestedPackages(nestedPackage, level + 1);
		}
	}

	/**
	 * Get classes and transcribe them.
	 * 
	 * @param owner
	 *            owner package
	 */
	private void transcribeClasses(Package owner) {
		// get classes owned by owner package
		for (Type type : owner.getOwnedTypes()) {
			if (type instanceof Class) {
				classes.add((Class) type);
			}
		}

		// transcribe classes
		for (Class clazz : classes) {
			// transcribe label of class how paragraph
			transcription.writeParagraph(clazz.getName(), false);
			
			classes.clear();
		}
	}
}
</source>

==Step 2. Define a new Template==
For defining a new Template, we must create and add in a plug-in an �ott� or �odt� file that defines the document style. After that, we must implement a class that extends '''TemplateResourceServiceImpl''' available in ''org.eclipse.papyrus.model2doc.core'' plug-in. See below an example of implementation:

<source lang="java">
public class MyUMLTemplate extends TemplateResourceServiceImpl {

	/**
	 * Get template file extensions.
	 * @return
	 */
	@Override
	public String[] getTemplateFileExtensions() {
		return new String [] {"odt", "ott"}; //$NON-NLS-1$ //$NON-NLS-2$
	}

	/**
	 * Get plug-in ID who contains the template.
	 * 
	 * @return
	 */
	@Override
	public String getTemplatePlugInID() {
		return Activator.PLUGIN_ID;
	}

	/**
	 * Get template path in plug-in. 
	 * 
	 * @return
	 */
	@Override
	public String getTemplatePathInPlugIn() {
		return "/resources/template/MyUMLTemplate.ott"; //$NON-NLS-1$
	}

}
</source>

==Step 3. Define a new Context==
For defining a new Context, we must create and add in a plug-in an �ott� or �odt� file that defines the document style. After that, we must implement a class that extends '''CreateDocumentViewEditorHandler''' available in ''org.eclipse.papyrus.model2doc.documentview.ui'' plug-in. See below an example of implementation:

<source lang="java">
public class MyUML2ODTHandler extends CreateDocumentViewEditorHandler {
	
	private String generatedDocumentFileURI;
	
	@Override
	public Object execute(ExecutionEvent event) throws ExecutionException {
		// never used
		return null;
	}
	
	@Override
	public boolean generateDocument(String name) {
		// instance an object of MyUMLTemplate (see Step 2)
		TemplateResourceService myUMLTemplate =  new MyUMLTemplate();
		
		// get project folder from the select element in the UML model
		String projectFolder = getWorkspaceResourceService().calculateProjectFolder(getSelection());
		
		/*
		 * set generator configuration 
		 */
		GeneratorConfig generatorConfig = GeneratorConfigFactory.INSTANCE.getDefaultGeneratorConfig();
		generatorConfig.setDocumentName(name);
		generatorConfig.setOutputFolder(projectFolder);
		generatorConfig.setProject(projectFolder);
		generatorConfig.setTemplateStyleFileURI(myUMLTemplate.getTemplateURLFromPlugIn());
		
		try {
			
			// get ODT transcription 
			Transcription odtTranscription = ODTTranscriptionFactory.INSTANCE.getDefaultODTTranscription(null, generatorConfig);
			
			// instance an object of MyUMLTranscriber(select element in the UML Model, transcription)
			Transcriber myUMLTranscriber = new MyUMLTranscriber((Package) getSelection(), odtTranscription);
			// run transcriber
			myUMLTranscriber.transcribe();
			
			/*
			 * set URI of generated document file
			 */
			StringBuilder uriBuilder = new StringBuilder();
			uriBuilder.append(generatorConfig.getOutputFolder());
			uriBuilder.append(File.separator);
			uriBuilder.append(generatorConfig.getDocumentName());
			uriBuilder.append(".odt"); //$NON-NLS-1$
			
			Path path = new Path (uriBuilder.toString());
			generatedDocumentFileURI =  path.toString();
			
			// refresh Workspace after document generation
			getWorkspaceResourceService().refreshWorkspace(generatorConfig.getProject());
			return true;
		} catch (Exception e) {
			Activator.log.error(e);
			return false;
		}
	}

	@Override
	public String getGeneratedDocumentFileURI() {
		return generatedDocumentFileURI;
	}
}
</source>

Next step, we must define a new viewpoint, My UML Document, and define what context this viewpoint is available. For that we will use the Papyrus Architecture Framework (see more details [http://127.0.0.1:65243/help/topic/org.eclipse.papyrus.infra.architecture.doc/target/generated-eclipse-help/architecture.html?cp=19_1_7 here]). In this use case, the viewpoint will be available on UML Context. See below an example of architecture file definition:
====1. Set domain====
[[Image:images/customization/architecture/Architecture01_Domain.PNG]]

====2. Set language====
Select domain element, open menu context and select '''New Child > Description Language'''.

[[Image:images/customization/architecture/Architecture02_Language.PNG]]
====3. Set viewpoints====
Select language element, open menu context and select '''New Child > Viewpoint'''.

=====3.1 Add Software Analysis viewpoint=====
[[Image:images/customization/architecture/Architecture03_Viewpoint_Software_Analysis.PNG]]

=====3.2 Add Software Design viewpoint=====
[[Image:images/customization/architecture/Architecture04_Viewpoint_Software_Design.PNG]] 

====4. Set MyUMLDocument Representation====
Select language element, open menu context and select '''New Child > Papyrus Document'''.
=====4.1 Define MyUMLDocument Representation=====
[[Image:images/customization/architecture/Architecture05_MyUMLDocument_Representation.PNG]] 

'''Notes:'''
* ''Creation Command Class:'' set the handler class defined in the beginning of this section. 
* ''Document Kind:'' in this example, you must set '''odt'''

=====4.2 Define Root=====
[[Image:images/customization/architecture/Architecture06_Root_MyUMLDocument_Representation.PNG]] 

=====4.3 Define Owner=====
[[Image:images/customization/architecture/Architecture07_Owner_MyUMLDocument_Representation.PNG]] 

====5. Load resource====
In the end, we must load on the architecture file this resource 
<source>
platform:/plugin/org.eclipse.papyrus.model2doc.documentview.ui/resources/model/documentviewadvices.elementtypesconfigurations
</source>

==Result==
Select model element (model or package), open menu context and select '''New Document > My UML Document'''.

[[Image:images/customization/result/Result01_Menu_Generate_MyUMLDoc.PNG]] 

Select document element in the '''Model Explorer''' and open it.

[[Image:images/customization/result/Result02_Generated_MyUMLDoc.PNG]] 

